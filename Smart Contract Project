// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

 contract ExampleContract
 {
    address public owner;
    uint256 public value;

    constructor()
    {
        owner = msg.sender;
    }

    function setValue(uint256 _newValue) external 
    {
        //use require() to validate a condition
        require(msg.sender == owner , "Only the owner can set the value");

        // Use assert() to check an invariant(e.g , value should not exceed 100)
        assert(_newValue <= 100);

        // set the new value
        value = _newValue;
    }

    function withdraw() external 
    {
        // Use revert() to revert the transaction(e.g. , if insufficient balance)
        require(msg.sender == owner, "only the owner can withdraw");
        payable(owner).transfer(address(this).balance);
    }
 }


